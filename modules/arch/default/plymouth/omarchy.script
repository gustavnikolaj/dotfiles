# Omarchy Plymouth Theme Script

Window.SetBackgroundTopColor(0.101, 0.105, 0.149);
Window.SetBackgroundBottomColor(0.101, 0.105,  0.149);

logo.image = Image("logo.png");
logo.sprite = Sprite(logo.image);
logo.sprite.SetX (Window.GetX() + Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
logo.sprite.SetY (Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
logo.sprite.SetOpacity (1);

# Use these to adjust the progress bar timing
global.fake_progress_limit = 0.7;  # Target percentage for fake progress (0.0 to 1.0)
global.fake_progress_duration = 15.0;  # Duration in seconds to reach limit

# Progress bar animation variables
global.fake_progress = 0.0;
global.real_progress = 0.0;
global.fake_progress_active = 0; # 0 / 1 boolean
global.animation_frame = 0;
global.fake_progress_start_time = 0;  # Track when fake progress started
global.password_shown = 0;  # Track if password dialog has been shown
global.max_progress = 0.0;  # Track the maximum progress reached to prevent backwards movement

fun refresh_callback ()
  {
    global.animation_frame++;
    
    # Animate fake progress to limit over time with easing
    if (global.fake_progress_active == 1)
      {
        # Calculate elapsed time since start
        elapsed_time = global.animation_frame / 50.0;  # Convert frames to seconds (50 FPS)
        
        # Calculate linear progress ratio (0 to 1) based on time
        time_ratio = elapsed_time / global.fake_progress_duration;
        if (time_ratio > 1.0)
          time_ratio = 1.0;
        
        # Apply easing curve: ease-out quadratic
        # Formula: 1 - (1 - x)^2
        eased_ratio = 1 - ((1 - time_ratio) * (1 - time_ratio));
        
        # Calculate fake progress based on eased ratio
        global.fake_progress = eased_ratio * global.fake_progress_limit;
        
        # Update progress bar with fake progress
        update_progress_bar(global.fake_progress);
      }
  }


Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Helper Functions --------------------------------

fun update_progress_bar(progress)
  {
    # Only update if progress is moving forward
    if (progress > global.max_progress)
      {
        global.max_progress = progress;
        width = Math.Int(progress_bar.original_image.GetWidth() * progress);
        if (width < 1) width = 1;  # Ensure minimum width of 1 pixel
        
        progress_bar.image = progress_bar.original_image.Scale(width, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage(progress_bar.image);
      }
  }

fun show_progress_bar()
  {
    progress_box.sprite.SetOpacity(1);
    progress_bar.sprite.SetOpacity(1);
  }

fun hide_progress_bar()
  {
    progress_box.sprite.SetOpacity(0);
    progress_bar.sprite.SetOpacity(0);
  }

fun show_password_dialog()
  {
    lock.sprite.SetOpacity(1);
    entry.sprite.SetOpacity(1);
  }

fun hide_password_dialog()
  {
    lock.sprite.SetOpacity(0);
    entry.sprite.SetOpacity(0);
    for (index = 0; bullet.sprites[index]; index++)
      bullet.sprites[index].SetOpacity(0);
  }

fun start_fake_progress()
  {
    # Don't reset if we already have progress
    if (global.max_progress == 0.0)
      {
        global.fake_progress = 0.0;
        global.real_progress = 0.0;
        update_progress_bar(0.0);
      }
    global.fake_progress_active = 1;
    global.animation_frame = 0;
  }

fun stop_fake_progress()
  {
    global.fake_progress_active = 0;
  }

#----------------------------------------- Dialogue --------------------------------

lock.image = Image("lock.png");
entry.image = Image("entry.png");
bullet.image = Image("bullet.png");

entry.sprite = Sprite(entry.image);
entry.x = Window.GetX() + Window.GetWidth()/2 - entry.image.GetWidth() / 2;
entry.y = logo.sprite.GetY() + logo.image.GetHeight() + 40;
entry.sprite.SetPosition(entry.x, entry.y, 10001);
entry.sprite.SetOpacity(0);

# Scale lock to be slightly shorter than entry field height
# Original lock is 84x96, entry height determines scale
lock_height = entry.image.GetHeight() * 0.8;
lock_scale = lock_height / 96;
lock_width = 84 * lock_scale;

scaled_lock = lock.image.Scale(lock_width, lock_height);
lock.sprite = Sprite(scaled_lock);
lock.x = entry.x - lock_width - 15;
lock.y = entry.y + entry.image.GetHeight()/2 - lock_height/2;
lock.sprite.SetPosition(lock.x, lock.y, 10001);
lock.sprite.SetOpacity(0);

# Bullet array
bullet.sprites = [];

fun display_normal_callback ()
  {
    hide_password_dialog();
    
    # Get current mode
    mode = Plymouth.GetMode();
    
    # Only show progress bar for boot and resume modes
    if ((mode == "boot" || mode == "resume") && global.password_shown == 1)
      {
        show_progress_bar();
        start_fake_progress();
      }
  }

fun display_password_callback (prompt, bullets)
  {
    global.password_shown = 1;  # Mark that password dialog has been shown
    
    # Reset progress when password dialog appears
    stop_fake_progress();
    hide_progress_bar();
    global.max_progress = 0.0;
    global.fake_progress = 0.0;
    global.real_progress = 0.0;
    show_password_dialog();
    
    # Clear all bullets first
    for (index = 0; bullet.sprites[index]; index++)
      bullet.sprites[index].SetOpacity(0);
    
    # Create and show bullets for current password
    for (index = 0; index < bullets; index++)
      {
        if (!bullet.sprites[index])
          {
            # Scale bullet image to 7x7 pixels
            scaled_bullet = bullet.image.Scale(7, 7);
            bullet.sprites[index] = Sprite(scaled_bullet);
            bullet.x = entry.x + 20 + index * (7 + 5);
            bullet.y = entry.y + entry.image.GetHeight() / 2 - 3.5;
            bullet.sprites[index].SetPosition(bullet.x, bullet.y, 10002);
          }
        bullet.sprites[index].SetOpacity(1);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Progress Bar --------------------------------

progress_box.image = Image("progress_box.png");
progress_box.sprite = Sprite(progress_box.image);

progress_box.x = Window.GetX() + Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
progress_box.y = entry.y + entry.image.GetHeight() / 2 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);
progress_box.sprite.SetOpacity(0);

progress_bar.original_image = Image("progress_bar.png");
progress_bar.sprite = Sprite();
progress_bar.image = progress_bar.original_image.Scale(1, progress_bar.original_image.GetHeight());

progress_bar.x = Window.GetX() + Window.GetWidth() / 2 - progress_bar.original_image.GetWidth() / 2;
progress_bar.y = progress_box.y + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);
progress_bar.sprite.SetOpacity(0);

fun progress_callback (duration, progress)
  {
    global.real_progress = progress;
    
    # If real progress is above limit, stop fake progress and use real progress
    if (progress > global.fake_progress_limit)
      {
        stop_fake_progress();
        update_progress_bar(progress);
      }
  }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
  logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun display_message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

fun hide_message_callback (text)
{
  message_sprite.SetOpacity(0);
}

Plymouth.SetDisplayMessageFunction (display_message_callback);
Plymouth.SetHideMessageFunction (hide_message_callback);
